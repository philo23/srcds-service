#!/bin/bash

USER="steam"

PATH=/bin:/usr/bin:/sbin:/usr/sbin
DESC="Source Dedicated Server"
NAME=srcds
DIR=/opt/steam
PIDFILE=/var/run/$NAME.pid
DAEMON=$DIR/tf2/srcds_run
SCRIPTNAME=/etc/init.d/$NAME



[ -x "$DAEMON" ] || exit 0

ARGS=()
CVARS=()

[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Concat all of the commandline arguments and CVars
ARGS=$(printf " %s" "${ARGS[@]}")
ARGS=${ARGS:1}
CVARS=$(printf " %s" "${CVARS[@]}")
CVARS=${CVARS:1}


DAEMON_ARGS="-steam_dir $DIR -steamcmd_script $DIR/steamcmd.sh -pidfile $PIDFILE $ARGS $CVARS"


. /lib/init/vars.sh
. /lib/lsb/init-functions


do_start() {
	# Help srcds out by making the PID file and
	# chowning it seeing as it doesnt like doing that itself
	touch $PIDFILE
	chown $USER $PIDFILE

	# Check to see its running first
	start-stop-daemon --start --quiet --pidfile $PIDFILE --chuid $USER --exec $DAEMON --test > /dev/null || return 1
	# Start the SRCDS running
	start-stop-daemon --start --quiet --pidfile $PIDFILE --background --chuid $USER --exec $DAEMON -- $DAEMON_ARGS || return 2
}
do_stop () {
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2

	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2

	# Delete the PID file
	rm -f $PIDFILE
	return "$RETVAL"
}


case "$1" in
	start)
		[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
		do_start
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
		;;

	stop)
		[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
		do_stop
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
		;;

	status)
		status_of_proc -p $PIDFILE "$DAEMON" "$NAME" && exit 0 || exit $?
		;;

	restart)
		log_daemon_msg "Restarting $DESC" "$NAME"
		do_stop
		case "$?" in
			0|1)
				do_start
				case "$?" in
					0) log_end_msg 0 ;;
					1) log_end_msg 1 ;; # old process still running
					*) log_end_msg 1 ;; # Failed to start
				esac
				;;

			*)
				# Failed to stop
				log_end_msg 1
				;;
		esac
		;;

	*)
		echo "Usage: $SCRIPTNAME {start|stop|restart|status}" >&2
		exit 3
		;;
		

esac


exit 0
